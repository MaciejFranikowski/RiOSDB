version: "2"

services:
  nginx:
    image: nginx
    container_name: nginx-dev
    ports:
      - "8080:8080"
    depends_on:
      - frontend
      - backend
      - master
      - slave_1
      - replication
    networks:
      - main
    volumes:
      - ./nginx/dev.cfg:/etc/nginx/nginx.conf:ro
  backend:
    container_name: backend_dev
    build:
      context: ./backend
      args:
        b_export: 5000
    environment:
      - NODE_ENV=development
      - DOCKER_GID=963
      - PORT=5000
      - JWT_SECRET_KEY=super_secret_jwt_key
      - DOMAIN_NAME=http://localhost
    volumes:
      - ./backend:/code
      - /code/node_modules
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - /tmp:/tmp
    ports:
      - "5000:5000"
    networks:
      - main
    depends_on:
      - master
      - slave_1
      - replication
  frontend:
    container_name: frontend-dev
    build:
      context: ./frontend
      args:
        b_export: 3000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - main
    environment:
      - NODE_ENV=development
    depends_on:
      - master
      - slave_1
      - replication
  master:
    image: mysql:5.7.27
    container_name: ${MASTER_1_HOSTNAME}
    hostname: ${MASTER_1_HOSTNAME}
    volumes:
      - ./database/conf/master.cnf:/etc/mysql/conf.d/my.cnf:ro
      - ./database/data/master:/var/lib/mysql:rw
      - /usr/share/zoneinfo/:/usr/share/zoneinfo/:ro
    environment:
      MYSQL_ROOT_PASSWORD: ${MASTER_1_ROOT_PASSWORD}
      MYSQL_DATABASE: test
      MYSQL_USER: test
      MYSQL_PASSWORD: test
    networks:
      main:
        ipv4_address: ${MASTER_1_HOST_IP}
  slave_1:
    image: mysql:5.7.27
    container_name: ${SLAVE_1_HOSTNAME}
    hostname: ${SLAVE_1_HOSTNAME}
    volumes:
      - ./database/conf/slave1.cnf:/etc/mysql/conf.d/my.cnf:ro
      - ./database/data/slave1:/var/lib/mysql:rw
      - /usr/share/zoneinfo/:/usr/share/zoneinfo/:ro
    environment:
      MYSQL_ROOT_PASSWORD: ${SLAVE_1_ROOT_PASSWORD}
      MYSQL_DATABASE: test
      MYSQL_USER: test
      MYSQL_PASSWORD: test
    networks:
      main:
       ipv4_address: ${SLAVE_1_HOST_IP}
    depends_on:
      - master
  replication:
    image: ubuntu:18.04
    volumes:
      - ./database/scripts:${REPL_SCRIPT_MOUNT_PATH}
    networks:
      - main
    environment:
      MASTER_1_HOSTNAME: ${MASTER_1_HOSTNAME}
      MASTER_1_HOST_IP: ${MASTER_1_HOST_IP}
      MASTER_1_ROOT_USER: ${MASTER_1_ROOT_USER}
      MASTER_1_ROOT_PASSWORD: ${MASTER_1_ROOT_PASSWORD}

      SLAVE_1_HOSTNAME: ${SLAVE_1_HOSTNAME}
      SLAVE_1_HOST_IP: ${SLAVE_1_HOST_IP}
      SLAVE_1_ROOT_USER: ${SLAVE_1_ROOT_USER}
      SLAVE_1_ROOT_PASSWORD: ${SLAVE_1_ROOT_PASSWORD}


      REPL_USER: ${REPL_USER}
      REPL_PASSWORD: ${REPL_PASSWORD}
    depends_on:
      - master
      - slave_1
    command: bash ${REPL_SCRIPT_MOUNT_PATH}/master_slave.sh

networks:
  main:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450
    ipam:
      config:
        - subnet: 10.208.0.0/16


